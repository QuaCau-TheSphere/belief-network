/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD.
If you want to view the source, visit the pluginsâ€™ github repository.
*/

var A=Object.create;var P=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,q=Object.prototype.hasOwnProperty;var E=g=>P(g,"__esModule",{value:!0});var D=(g,i)=>{E(g);for(var e in i)P(g,e,{get:i[e],enumerable:!0})},B=(g,i,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let t of j(i))!q.call(g,t)&&t!=="default"&&P(g,t,{get:()=>i[t],enumerable:!(e=L(i,t))||e.enumerable});return g},k=g=>B(E(P(g!=null?A(J(g)):{},"default",g&&g.__esModule&&"default"in g?{get:()=>g.default,enumerable:!0}:{value:g,enumerable:!0})),g);var y=(g,i,e)=>new Promise((t,w)=>{var l=r=>{try{h(e.next(r))}catch(o){w(o)}},u=r=>{try{h(e.throw(r))}catch(o){w(o)}},h=r=>r.done?t(r.value):Promise.resolve(r.value).then(l,u);h((e=e.apply(g,i)).next())});D(exports,{default:()=>C});var I=k(require("obsidian"));var f=k(require("obsidian")),S=k(require("fs")),F=class{constructor(i,e){this.plugin=i,this.app=e}getAbsolutePath(i){let e,t;if(this.app.vault.adapter instanceof f.FileSystemAdapter)e=this.app.vault.adapter.getBasePath();else throw new Error("Cannot determine base path.");return t=`${this.app.vault.configDir}/plugins/metadata-extractor/${i}`,`${e}/${t}`}getUniqueTags(i){let e=[];return(0,f.getAllTags)(i)&&(e=(0,f.getAllTags)(i)),e=e.map(t=>t.slice(1).toLowerCase()),e=Array.from(new Set(e)),e}writeAllExceptMd(i){let e=this.plugin.settings.allExceptMdPath;this.plugin.settings.allExceptMdPath||(e=this.getAbsolutePath(i));let t=[],w=this.app.vault.getAllLoadedFiles();for(let r of w)r instanceof f.TFolder&&t.push({name:r.name,relativePath:r.path});let l=[];for(let r of w)r instanceof f.TFile&&r.path.slice(-3)!==".md"&&l.push({name:r.name,basename:r.basename,relativePath:r.path});let u={},h=!0;t.length>0&&l.length>0?Object.assign(u,{folders:t,nonMdFiles:l}):t.length>0&&l.length===0?Object.assign(u,{folders:t}):h=!1,h?((0,S.writeFileSync)(e,JSON.stringify(u,null,2)),console.log("Metadata Extractor plugin: wrote the allExceptMd JSON file")):new f.Notice("There are neither folders nor non-Markdown files in your vault.")}writeTagsToJSON(i){let e=this.plugin.settings.tagPath;this.plugin.settings.tagPath||(e=this.getAbsolutePath(i));let t=[];(()=>{this.app.vault.getMarkdownFiles().forEach(a=>{let n;this.app.metadataCache.getFileCache(a)!==null&&(n=this.app.metadataCache.getFileCache(a));let p=a.path,v=this.getUniqueTags(n);v.length!==0&&t.push({name:p,tags:v})})})();let l=t.map(a=>a.tags).reduce((a,n)=>a.concat(n.map(p=>p.toLowerCase()))),u=Array.from(new Set(l)),h=this.app.metadataCache.getTags(),r={};for(let[a,n]of Object.entries(h)){let p=a.slice(1).toLowerCase(),v=n;r[p]=v}let o=[];u.forEach(a=>{let n=[];t.forEach(v=>{v.tags.contains(a)&&n.push(v.name)});let p=r[a];o.push({tag:a,tagCount:p,relativePaths:n})}),(0,S.writeFileSync)(e,JSON.stringify(o,null,2)),console.log("Metadata Extractor plugin: wrote the tagToFile JSON file")}writeCacheToJSON(i){let e=this.plugin.settings.metadataPath;this.plugin.settings.metadataPath||(e=this.getAbsolutePath(i));let t=[],w={};for(let[h,r]of Object.entries(this.app.vault.fileMap)){let o=h,a="";if(o.slice(-3)===".md"){if(o.includes("/")){let n=o.split("/").last();typeof n=="string"&&(a=n)}a=a.slice(0,-3),w[a]=o}}(()=>{this.app.vault.getMarkdownFiles().forEach(h=>{let r=h.basename,o=h.path,a;typeof this.app.metadataCache.getFileCache(h)!="undefined"?a=this.app.metadataCache.getFileCache(h):new f.Notice("Something with accessing the cache went wrong!");let n,p,v=[],m={};m.fileName=r,m.relativePath=o,n=this.getUniqueTags(a),n!==null&&n.length>0&&(m.tags=n),a.frontmatter&&(p=(0,f.parseFrontMatterAliases)(a.frontmatter),p!==null&&p.length>0&&(m.aliases=p)),a.headings&&(a.headings.forEach(s=>{v.push({heading:s.heading,level:s.level})}),m.headings=v);let T=W(a,m,w,o,r);Object.assign(m,T),Object.keys(m).length>0&&t.push(m)})})();let l=[],u=t;t.forEach(h=>{let r=h.fileName,o=h.relativePath;u.forEach(a=>{r!==a.fileName&&a.links&&a.links.forEach(n=>{n.relativePath===o&&(n.cleanLink&&n.displayText?l.push({fileName:a.fileName,link:n.link,relativePath:a.relativePath,cleanLink:n.cleanLink,displayText:n.displayText}):n.cleanLink&&!n.displayText?l.push({fileName:a.fileName,link:n.link,relativePath:a.relativePath,cleanLink:n.cleanLink}):!n.cleanLink&&n.displayText?l.push({fileName:a.fileName,link:n.link,relativePath:a.relativePath,displayText:n.displayText}):l.push({fileName:a.fileName,link:n.link,relativePath:a.relativePath}))})}),l.length>0&&(h.backlinks=l),l=[]}),(0,S.writeFileSync)(e,JSON.stringify(t,null,2)),console.log("Metadata Extractor plugin: wrote the metadata JSON file")}setWritingSchedule(i,e,t){if(this.plugin.settings.writingFrequency!=="0"){let l=parseInt(this.plugin.settings.writingFrequency)*6e4;window.clearInterval(this.plugin.intervalId1),this.plugin.intervalId1=void 0,this.plugin.intervalId1=window.setInterval(()=>this.writeTagsToJSON(i),l),this.plugin.registerInterval(this.plugin.intervalId1),window.clearInterval(this.plugin.intervalId2),this.plugin.intervalId2=void 0,this.plugin.intervalId2=window.setInterval(()=>this.writeCacheToJSON(e),l),this.plugin.registerInterval(this.plugin.intervalId2),window.clearInterval(this.plugin.intervalId3),this.plugin.intervalId3=void 0,this.plugin.intervalId3=window.setInterval(()=>this.writeAllExceptMd(t),l),this.plugin.registerInterval(this.plugin.intervalId3)}else this.plugin.settings.writingFrequency==="0"&&(window.clearInterval(this.plugin.intervalId1),window.clearInterval(this.plugin.intervalId2),window.clearInterval(this.plugin.intervalId3))}};function W(g,i,e,t,w){let l=[],u=g,h=e,r=i,o=t,a=w,n=[];p();function p(){let m=[],T=[];u.links&&(m=u.links),u.embeds&&(T=u.embeds.filter(s=>{let d=s.link;if(d.includes("/")&&(d=d.split("/").last(),d.includes("#")&&(d=d.replace(/#.+/g,""))),d.includes("#")&&(d=d.replace(/#.+/g,"")),h[d])return s})),n=m.concat(T),v(n)}function v(m){n.forEach(T=>{let s=T.link,d="";typeof T.displayText!="undefined"&&(d=T.displayText),s.includes("/")&&(s=s.split("/").last());let c="";if(!s.includes("#")&&d===s)c=h[s],c?l.push({link:s,relativePath:c}):l.push({link:s});else if(s.includes("#")&&s.charAt(0)!=="#"&&(!d.includes("#")||!d.includes(">"))){let b=d,M=s.replace(/#.+/g,"");c=h[M],c?l.push({link:s,relativePath:c,cleanLink:M,displayText:b}):l.push({link:s,cleanLink:M,displayText:b})}else if(s.includes("#")&&s.charAt(0)!=="#"&&d.includes("#")){let b=s.replace(/#.+/g,"");c=h[b],c?l.push({link:s,relativePath:c,cleanLink:b}):l.push({link:s,cleanLink:b})}else if(!s.includes("#")&&s!==d){let b=d;c=h[s],c?l.push({link:s,relativePath:c,displayText:b}):l.push({link:s,displayText:b})}else if(s.charAt(0)==="#"&&s!==d){let b=d;c=o,l.push({link:s,relativePath:c,cleanLink:a,displayText:b})}else s.charAt(0)==="#"&&s===d&&(c=o,l.push({link:s,relativePath:c}))}),l.length>0&&(r.links=l)}return r}var x=k(require("obsidian")),O={tagPath:"",metadataPath:"",allExceptMdPath:"",tagFile:"tags.json",metadataFile:"metadata.json",allExceptMdFile:"allExceptMd.json",writingFrequency:"0",writeFilesOnLaunch:!1},N=class extends x.PluginSettingTab{constructor(i,e){super(i,e);this.plugin=e}display(){let{containerEl:i}=this;i.empty(),i.createEl("h2",{text:"Metadata Extractor Settings"}),new x.Setting(i).setName("File-write path for tags").setDesc("Where the tag-to-file-names JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/tags.json").setValue(this.plugin.settings.tagPath).onChange(t=>y(this,null,function*(){this.plugin.settings.tagPath=t,yield this.plugin.saveSettings()}))),new x.Setting(i).setName("File name of tag-to-file-names JSON").setDesc("Requires the .json extension. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("tags.json").setValue(this.plugin.settings.tagFile).onChange(t=>y(this,null,function*(){this.plugin.settings.tagFile=t,yield this.plugin.saveSettings()}))),new x.Setting(i).setName("File-write path for metadata").setDesc("Where the metadata JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/metadata.json").setValue(this.plugin.settings.metadataPath).onChange(t=>y(this,null,function*(){this.plugin.settings.metadataPath=t,yield this.plugin.saveSettings()}))),new x.Setting(i).setName("File name of metadata JSON").setDesc("Requires the .json extension; leave empty if setting above was changed. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("metadata.json").setValue(this.plugin.settings.metadataFile).onChange(t=>y(this,null,function*(){this.plugin.settings.metadataFile=t,yield this.plugin.saveSettings()}))),new x.Setting(i).setName("File-write path of allExceptMd JSON").setDesc("Where the allExceptMd JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/allExceptMd.json").setValue(this.plugin.settings.allExceptMdPath).onChange(t=>y(this,null,function*(){this.plugin.settings.allExceptMdPath=t,yield this.plugin.saveSettings()}))),new x.Setting(i).setName("File name of allExceptMd JSON").setDesc("Requires the .json extension; leave empty if setting above was changed. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("metadata.json").setValue(this.plugin.settings.allExceptMdFile).onChange(t=>y(this,null,function*(){this.plugin.settings.allExceptMdFile=t,yield this.plugin.saveSettings()}))),new x.Setting(i).setName("Configure frequency for writing the three JSON files").setDesc("The frequency has to be entered in minutes. Set it to 0 to disable the periodic writing.").addText(e=>e.setPlaceholder("120").setValue(this.plugin.settings.writingFrequency).onChange(t=>y(this,null,function*(){t===""?this.plugin.settings.writingFrequency="0":this.plugin.settings.writingFrequency=t,yield this.plugin.saveSettings(),this.plugin.methods.setWritingSchedule(this.plugin.settings.tagFile,this.plugin.settings.metadataFile,this.plugin.settings.allExceptMdFile)}))),new x.Setting(i).setName("Write JSON files automatically when Obsidian launches").setDesc("If enabled, the JSON files will be written each time Obsidian starts.").addToggle(e=>{e.setValue(this.plugin.settings.writeFilesOnLaunch).onChange(t=>{this.plugin.settings.writeFilesOnLaunch=t,this.plugin.saveSettings()})})}};var C=class extends I.Plugin{constructor(){super(...arguments);this.intervalId1=void 0;this.intervalId2=void 0;this.intervalId3=void 0;this.methods=new F(this,this.app)}onload(){return y(this,null,function*(){console.log("loading Metadata Extractor plugin"),yield this.loadSettings(),this.addCommand({id:"write-tags-json",name:"Write JSON file with tags and associated file names to disk.",callback:()=>{this.methods.writeTagsToJSON(this.settings.tagFile)}}),this.addCommand({id:"write-metadata-json",name:"Write JSON file with metadata to disk.",callback:()=>{this.methods.writeCacheToJSON(this.settings.metadataFile)}}),this.addCommand({id:"write-allExceptMd-json",name:"Write JSON file with all folders and non-MD files to disk.",callback:()=>{this.methods.writeAllExceptMd(this.settings.allExceptMdFile)}}),this.addSettingTab(new N(this.app,this)),this.settings.writeFilesOnLaunch&&this.app.workspace.onLayoutReady(()=>{this.methods.writeTagsToJSON(this.settings.tagFile),this.methods.writeCacheToJSON(this.settings.metadataFile),this.methods.writeAllExceptMd(this.settings.allExceptMdFile)}),this.methods.setWritingSchedule(this.settings.tagFile,this.settings.metadataFile,this.settings.allExceptMdFile)})}onunload(){console.log("unloading Metadata Extractor plugin")}loadSettings(){return y(this,null,function*(){this.settings=Object.assign({},O,yield this.loadData())})}saveSettings(){return y(this,null,function*(){yield this.saveData(this.settings)})}};0&&(module.exports={});
